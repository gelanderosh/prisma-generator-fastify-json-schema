import { generatorHandler } from '@prisma/generator-helper'
import { transformDMMF } from './generator/transformDMMF'
import * as fs from 'fs'
import * as path from 'path'
import { parseEnvValue } from '@prisma/internals'
import { JSONSchema7 } from 'json-schema'

generatorHandler({
    onManifest() {
        return {
            defaultOutput: './json-schema',
            prettyName: 'Prisma JSON Schema Generator',
        }
    },
    async onGenerate(options) {
        const jsonSchemas = transformDMMF(
            options.dmmf,
            options.generator.config,
        )
        for (const [name, schema] of jsonSchemas) {
            if (options.generator.output) {
                const outputDir =
                    // This ensures previous version of prisma are still supported
                    typeof options.generator.output === 'string'
                        ? (options.generator.output as unknown as string)
                        : // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                          parseEnvValue(options.generator.output)
                try {
                    await fs.promises.mkdir(outputDir, {
                        recursive: true,
                    })
                    await fs.promises.writeFile(
                        path.join(outputDir, `${name}.json`),
                        JSON.stringify(schema, null, 2),
                    )
                    if (options.generator.config?.generateExportFile) {
                        await generateIndexFile({
                            jsonSchemas,
                            outputDir,
                            exportFileName: options.generator.config
                                ?.exportFileName as string,
                            exportAsEsModule: options.generator.config
                                ?.exportAsEsModule as string,
                            useAssert: options.generator.config
                                ?.useAssert as string,
                            exportAsTs: options.generator.config
                                ?.exportAsTs as string,
                            useWith: options.generator.config
                                ?.useWith as string,
                        })
                    }
                } catch (e) {
                    console.error(
                        'Error: unable to write files for Prisma Schema Generator',
                    )
                    throw e
                }
            } else {
                throw new Error(
                    'No output was specified for Prisma Schema Generator',
                )
            }
        }
    },
})

async function generateIndexFile({
    jsonSchemas,
    outputDir,
    exportFileName = 'index',
    exportAsEsModule,
    useAssert = 'true',
    useWith,
    exportAsTs = 'true',
}: {
    jsonSchemas: Array<[string, JSONSchema7]>
    outputDir: string
    exportFileName: string
    exportAsEsModule?: string
    useAssert?: string
    useWith?: string
    exportAsTs?: string
}): Promise<void> {
    const indexFileContent = `// This file was generated by Prisma Generator - Fastify JSON Schema`
    const indexFilePath = path.join(
        outputDir,
        `${exportFileName}${exportAsTs === 'false' ? '.js' : '.ts'}`,
    )
    let indexFileExports
    if (exportAsTs === 'true') {
        indexFileExports = jsonSchemas
            .map(([name]) => {
                return `export { default as ${name} } from './${name}.json'${
                    useAssert === 'true'
                        ? ' assert { type: "json" }'
                        : useWith === 'true'
                          ? ' with { type: "json" }'
                          : ''
                }`
            })
            .join('\n')
        indexFileExports += `\n`
    } else {
        indexFileExports = jsonSchemas
            .map(([name]) => {
                if (exportAsEsModule) {
                    return `export { default as ${name} } from './${name}.json' ${
                        useAssert ? 'assert' : 'with'
                    } { type: "json" }`
                } else {
                    return `module.exports.${name} = require('./${name}.json')`
                }
            })
            .join('\n')
    }
    const indexFile = `${indexFileContent}\n${indexFileExports}`
    await fs.promises.writeFile(indexFilePath, indexFile)
    return
}
